{"ast":null,"code":"import _slicedToArray from \"/home/patrik/School/ramverk2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nconst limitSteps = 100;\nconst delaySteps = 150;\nexport default function useLongPress(callback = () => {}, ms = 500) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        startLongPress = _useState2[0],\n        setStartLongPress = _useState2[1];\n\n  const _useState3 = useState(ms),\n        _useState4 = _slicedToArray(_useState3, 2),\n        delay = _useState4[0],\n        setDelay = _useState4[1];\n\n  useEffect(() => {\n    let timerId;\n\n    if (startLongPress) {\n      timerId = setInterval(() => {\n        callback();\n\n        if (delay > limitSteps) {\n          setDelay(prevState => prevState - delaySteps);\n        }\n      }, delay);\n    } else {\n      clearInterval(timerId);\n      setDelay(() => ms);\n    }\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [startLongPress, delay, callback, ms]);\n  return {\n    onMouseDown: () => setStartLongPress(true),\n    onMouseUp: () => setStartLongPress(false),\n    onMouseLeave: () => setStartLongPress(false),\n    onTouchStart: () => setStartLongPress(true),\n    onTouchEnd: () => setStartLongPress(false)\n  };\n}","map":{"version":3,"sources":["/home/patrik/School/ramverk2/src/components/views/testtest.js"],"names":["useState","useEffect","limitSteps","delaySteps","useLongPress","callback","ms","startLongPress","setStartLongPress","delay","setDelay","timerId","setInterval","prevState","clearInterval","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,UAAU,GAAG,GAAnB;AACA,MAAMC,UAAU,GAAG,GAAnB;AAEA,eAAe,SAASC,YAAT,CAAsBC,QAAQ,GAAG,MAAM,CAAG,CAA1C,EAA4CC,EAAE,GAAG,GAAjD,EAAsD;AAAA,oBACrBN,QAAQ,CAAC,KAAD,CADa;AAAA;AAAA,QAC1DO,cAD0D;AAAA,QAC1CC,iBAD0C;;AAAA,qBAEvCR,QAAQ,CAACM,EAAD,CAF+B;AAAA;AAAA,QAE1DG,KAF0D;AAAA,QAEnDC,QAFmD;;AAIjET,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,OAAJ;;AACA,QAAIJ,cAAJ,EAAoB;AAChBI,MAAAA,OAAO,GAAGC,WAAW,CAAC,MAAM;AACxBP,QAAAA,QAAQ;;AAER,YAAII,KAAK,GAAGP,UAAZ,EAAwB;AACpBQ,UAAAA,QAAQ,CAACG,SAAS,IAAIA,SAAS,GAAGV,UAA1B,CAAR;AACH;AACJ,OANoB,EAMlBM,KANkB,CAArB;AAOH,KARD,MAQO;AACHK,MAAAA,aAAa,CAACH,OAAD,CAAb;AACAD,MAAAA,QAAQ,CAAC,MAAMJ,EAAP,CAAR;AACH;;AAED,WAAO,MAAM;AACTQ,MAAAA,aAAa,CAACH,OAAD,CAAb;AACH,KAFD;AAGH,GAlBQ,EAkBN,CAACJ,cAAD,EAAiBE,KAAjB,EAAwBJ,QAAxB,EAAkCC,EAAlC,CAlBM,CAAT;AAoBA,SAAO;AACHS,IAAAA,WAAW,EAAE,MAAMP,iBAAiB,CAAC,IAAD,CADjC;AAEHQ,IAAAA,SAAS,EAAE,MAAMR,iBAAiB,CAAC,KAAD,CAF/B;AAGHS,IAAAA,YAAY,EAAE,MAAMT,iBAAiB,CAAC,KAAD,CAHlC;AAIHU,IAAAA,YAAY,EAAE,MAAMV,iBAAiB,CAAC,IAAD,CAJlC;AAKHW,IAAAA,UAAU,EAAE,MAAMX,iBAAiB,CAAC,KAAD;AALhC,GAAP;AAOH","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst limitSteps = 100;\nconst delaySteps = 150;\n\nexport default function useLongPress(callback = () => { }, ms = 500) {\n    const [startLongPress, setStartLongPress] = useState(false);\n    const [delay, setDelay] = useState(ms);\n\n    useEffect(() => {\n        let timerId;\n        if (startLongPress) {\n            timerId = setInterval(() => {\n                callback();\n\n                if (delay > limitSteps) {\n                    setDelay(prevState => prevState - delaySteps);\n                }\n            }, delay);\n        } else {\n            clearInterval(timerId);\n            setDelay(() => ms);\n        }\n\n        return () => {\n            clearInterval(timerId);\n        };\n    }, [startLongPress, delay, callback, ms]);\n\n    return {\n        onMouseDown: () => setStartLongPress(true),\n        onMouseUp: () => setStartLongPress(false),\n        onMouseLeave: () => setStartLongPress(false),\n        onTouchStart: () => setStartLongPress(true),\n        onTouchEnd: () => setStartLongPress(false),\n    };\n}"]},"metadata":{},"sourceType":"module"}